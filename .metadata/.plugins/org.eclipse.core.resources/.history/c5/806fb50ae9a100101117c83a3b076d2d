package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.example.demo.entity.Products;
import com.example.demo.repository.ProductsRepo;


@Service
public class ProductService {

	@Autowired
	ProductsRepo pr;
	
	//get all products
	public List<Products> getall() {
		return pr.findAll();
	}

	//get product by id
	public Products getbyid(int id) {
		return pr.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Product not found"));
	}

	//save product
	public Products save(Products p) {
		//check stock Quantity should be more than 0
		if (p.getStock_quantity() < 0)
		    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Stock quantity cannot be negative");

		//check stock Threashold should be more than 0
		if (p.getLow_stock_threshold() < 0)
		    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Low stock threshold cannot be negative");

		return pr.save(p);
	}
	
	//update product by id ......using PutMapping
	public Products update(int id,Products newdata) {
		Products existingProduct = pr.findById(id)
		        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,"Product not found with id: " + id));
		 
		if (newdata.getStock_quantity() < 0) {
		        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Stock quantity cannot be negative");
		    }
		
		    existingProduct.setName(newdata.getName());
		    existingProduct.setDescription(newdata.getDescription());
		    existingProduct.setStock_quantity(newdata.getStock_quantity());
		    existingProduct.setLow_stock_threshold(newdata.getLow_stock_threshold());

		    return pr.save(existingProduct);
	}
	
	//Partial update product data by id ...using patch mapping
	public Products partialUpdate(int id, Products partialData) {
        Products existingProduct = getbyid(id);

     // Update only the fields that are not null or non-zero
        if (partialData.getName() != null && !partialData.getName().isBlank()) {
            existingProduct.setName(partialData.getName());
        }

        if (partialData.getDescription() != null) {
            existingProduct.setDescription(partialData.getDescription());
        }

        if (partialData.getStock_quantity() >= 0) {
            existingProduct.setStock_quantity(partialData.getStock_quantity());
        }

        if (partialData.getLow_stock_threshold() > 0) {
            existingProduct.setLow_stock_threshold(partialData.getLow_stock_threshold());
        }

        return pr.save(existingProduct);
    }
	
	
	//Delete product
	public String delete(int id)
	{
		if(pr.existsById(id))
		{
			pr.deleteById(id);
			return "Product id "+id+" deleted Successfully";
		}
		else
		{
			return throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Product id "+id+" Not Found!!!");
		}
	}
	
	//Increase stock
	public Products increseStock(int id,int amount)
	{
		if (amount < 0)
		    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Increase amount must be positive");

		Products product=getbyid(id);
		product.setStock_quantity(product.getStock_quantity() + amount);
		return pr.save(product);
	}
	
	//Decrease Stock
	public Products decreaseStock(int id,int amount)
	{
		if (amount < 0)
		    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Decrease amount must be positive");

		Products product = getbyid(id);
		if(product.getStock_quantity() < amount)
		{
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Insufficient stock available");
			
		}
		product.setStock_quantity(product.getStock_quantity() - amount);
		return pr.save(product);
	}

	//Low Stock 
	public List<Products> getLowStockProducts() {
		return pr.findLowStock(5);  //5 is the deafault threadshold;
	}

	
}

	
