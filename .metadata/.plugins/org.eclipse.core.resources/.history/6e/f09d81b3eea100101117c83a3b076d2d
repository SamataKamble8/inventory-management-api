package com.example.demo.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.server.ResponseStatusException;

import com.example.demo.entity.Products;
import com.example.demo.repository.ProductsRepo;

class ProductServiceTest {

    @InjectMocks
    private ProductService productService;

    @Mock
    private ProductsRepo productsRepo;

    private Products product;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        product = new Products();
        product.setPid(1);
        product.setName("Laptop");
        product.setDescription("Gaming Laptop");
        product.setStock_quantity(10);
        product.setLow_stock_threshold(5);
    }

    // ------------------------- CRUD Tests -------------------------

    @Test
    void testGetAll() {
        when(productsRepo.findAll()).thenReturn(Arrays.asList(product));
        List<Products> products = productService.getall();
        assertEquals(1, products.size());
        assertEquals("Laptop", products.get(0).getName());
    }

    @Test
    void testGetById_Success() {
        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        Products p = productService.getbyid(1);
        assertEquals("Laptop", p.getName());
    }

    @Test
    void testGetById_NotFound() {
        when(productsRepo.findById(1)).thenReturn(Optional.empty());
        assertThrows(ResponseStatusException.class, () -> productService.getbyid(1));
    }

    @Test
    void testSave() {
        when(productsRepo.save(product)).thenReturn(product);
        Products saved = productService.save(product);
        assertEquals("Laptop", saved.getName());
    }

    @Test
    void testUpdate_Success() {
        Products updatedData = new Products();
        updatedData.setName("Laptop Pro");
        updatedData.setDescription("Updated Laptop");
        updatedData.setStock_quantity(15);
        updatedData.setLow_stock_threshold(3);

        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        when(productsRepo.save(product)).thenReturn(product);

        Products updated = productService.update(1, updatedData);
        assertEquals("Laptop Pro", updated.getName());
        assertEquals(15, updated.getStock_quantity());
    }

    @Test
    void testUpdate_NotFound() {
        Products updatedData = new Products();
        when(productsRepo.findById(1)).thenReturn(Optional.empty());
        assertThrows(ResponseStatusException.class, () -> productService.update(1, updatedData));
    }

    @Test
    void testDelete_Success() {
        when(productsRepo.existsById(1)).thenReturn(true);
        doNothing().when(productsRepo).deleteById(1);
        String result = productService.delete(1);
        assertEquals("Product id 1 deleted successfully", result);
    }

    @Test
    void testDelete_NotFound() {
        when(productsRepo.existsById(1)).thenReturn(false);
        assertThrows(ResponseStatusException.class, () -> productService.delete(1));
    }

    // ------------------------- Stock Management Tests -------------------------

    @Test
    void testIncreaseStock() {
        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        when(productsRepo.save(product)).thenReturn(product);

        Products updated = productService.increseStock(1, 5);
        assertEquals(15, updated.getStock_quantity());
    }

    @Test
    void testDecreaseStock_Success() {
        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        when(productsRepo.save(product)).thenReturn(product);

        Products updated = productService.decreaseStock(1, 5);
        assertEquals(5, updated.getStock_quantity());
    }

    @Test
    void testDecreaseStock_Insufficient() {
        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        assertThrows(ResponseStatusException.class, () -> productService.decreaseStock(1, 20));
    }

    @Test
    void testGetLowStockProducts() {
        when(productsRepo.findLowStock(5)).thenReturn(Arrays.asList(product));
        List<Products> lowStock = productService.getLowStockProducts();
        assertEquals(1, lowStock.size());
    }

    // ------------------------- PATCH / partialUpdate Tests -------------------------

    @Test
    void testPartialUpdate_NameOnly() {
        Products partialData = new Products();
        partialData.setName("Laptop Pro");

        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        when(productsRepo.save(product)).thenReturn(product);

        Products updated = productService.partialUpdate(1, partialData);
        assertEquals("Laptop Pro", updated.getName());
        assertEquals(10, updated.getStock_quantity());
    }

    @Test
    void testPartialUpdate_StockOnly() {
        Products partialData = new Products();
        partialData.setStock_quantity(15);

        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        when(productsRepo.save(product)).thenReturn(product);

        Products updated = productService.partialUpdate(1, partialData);
        assertEquals(15, updated.getStock_quantity());
        assertEquals("Laptop", updated.getName());
    }

    @Test
    void testPartialUpdate_LowStockThresholdOnly() {
        Products partialData = new Products();
        partialData.setLow_stock_threshold(3);

        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        when(productsRepo.save(product)).thenReturn(product);

        Products updated = productService.partialUpdate(1, partialData);
        assertEquals(3, updated.getLow_stock_threshold());
    }

    @Test
    void testPartialUpdate_NegativeStock_ShouldThrow() {
        Products partialData = new Products();
        partialData.setStock_quantity(-5);

        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        assertThrows(ResponseStatusException.class, () -> productService.partialUpdate(1, partialData));
    }

    @Test
    void testPartialUpdate_NegativeLowStock_ShouldThrow() {
        Products partialData = new Products();
        partialData.setLow_stock_threshold(-2);

        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        assertThrows(ResponseStatusException.class, () -> productService.partialUpdate(1, partialData));
    }

    @Test
    void testPartialUpdate_BlankName_ShouldNotChangeName() {
        Products partialData = new Products();
        partialData.setName("  ");

        when(productsRepo.findById(1)).thenReturn(Optional.of(product));
        when(productsRepo.save(product)).thenReturn(product);

        Products updated = productService.partialUpdate(1, partialData);
        assertEquals("Laptop", updated.getName());
    }

    @Test
    void testPartialUpdate_ProductNotFound_ShouldThrow() {
        Products partialData = new Products();
        partialData.setName("Laptop Pro");

        when(productsRepo.findById(1)).thenReturn(Optional.empty());
        assertThrows(ResponseStatusException.class, () -> productService.partialUpdate(1, partialData));
    }
}
